extends head 
block head
    title Pesquisa
    script(src="https://cdn.jsdelivr.net/npm/chart.js")

prepend header
    -currentPage = "stats"

block printpageinfo
    p Estatísticas da pesquisa por: "!{q || ""}"

append form
    .d-flex.my-2.justify-content-center.align-items-center
        button.btn.w-100(type="submit", formaction=`./?q=${q || ""}`): u Ver resultados da pesquisa
        button#onclickgraph(type="submit", formaction=`./stats?q=${q || ""}`, hidden): u Ver resultados da pesquisa

block main
    pre: code #{JSON.stringify(aggs["Secções"])}
    .row.p-2
        .col-12: h4 Acórdãos por tribunal e ano
        .p-relative(style="height: 70vh; width: 100%")
            canvas#trib-ano
    .row.p-2
        .col-12: h4 Acórdãos por Origem e ano
        .p-relative(style="height: 70vh; width: 100%")
            canvas#orig-ano
    .row.p-2
        .col-12.col-md-6
            h4 Acórdãos por Origem
            .p-relative(style="height: 70vh; width: 100%")
                canvas#orig-round
        .col-12.col-md-6
            h4 Secção dos Acórdãos 
            .p-relative(style="height: 70vh; width: 100%")
                canvas#seccao
    .row.p-2 
        small 
            | <b>Nota:</b> no caso de filtrar por um ano em particular, o gráfico poderá incluir outros anos.
            | Isto significa que alguma das datas associadas com o acórdão pertencem a esse ano, o acórdão aparece no gráfico com a maior data associada.
        script.
            fetch("./allStats?!{querystring}").then(r => r.json()).then(aggs => {
                const maxYear = parseInt(aggs.MaxAno.value_as_string);
                const minYear = parseInt(aggs.MinAno.value_as_string);
                const labelsYears = strRange(minYear, maxYear);

                new Chart(document.querySelector('#trib-ano'), {
                    type: "bar",
                    data: {
                        labels: labelsYears,
                        datasets: aggs.Anos.buckets.map(trib => ({
                            label: trib.key,
                            borderWidth: 0,
                            data: trib.Anos.buckets.map(ano => ({x: (ano.key_as_string), y: ano.doc_count})).sort((a, b) => a.x - b.x),
                            backgroundColor: tribColor(trib.key)
                        }))
                    },
                    options: {
                            plugins: {
                            legend: {
                                display: true,
                                position: "bottom",
                                align: "start"
                            }
                        },
                        scales: {
                            x: {
                                stacked: true
                            },
                            y: {
                                stacked: true
                            }
                        },
                        maintainAspectRatio: false,
                        onClick: barClick(aggs.Anos.buckets, "Tribunal")
                    }
                })
                new Chart(document.querySelector('#orig-ano'), {
                    type: "bar",
                    data: {
                        labels: labelsYears,
                        datasets: aggs.Origens.buckets.map(trib => ({
                            label: trib.key,
                            borderWidth: 0,
                            data: trib.Anos.buckets.map(ano => ({x: (ano.key_as_string), y: ano.doc_count})).sort((a, b) => a.x - b.x),
                            backgroundColor: origemColor(trib.key)
                        }))
                    },
                    options: {
                            plugins: {
                            legend: {
                                display: true,
                                position: "bottom",
                                align: "start"
                            }
                        },
                        scales: {
                            x: {
                                stacked: true
                            },
                            y: {
                                stacked: true
                            }
                        },
                        maintainAspectRatio: false,
                        onClick: barAnoClick(aggs.Origens.buckets, "Origem")
                    }
                });
                new Chart(document.getElementById("orig-round"), {
                    type: "doughnut",
                    data: {
                        labels: aggs.Origens.buckets.map(o => o.key),
                        datasets: [{
                            label: "Origem",
                            borderWidth: 0,
                            data: aggs.Origens.buckets.map(o => o.doc_count),
                            backgroundColor: aggs.Origens.buckets.map(o => origemColor(o.key))
                        }]
                    },
                    options: {
                            plugins: {
                            legend: {
                                display: true,
                                position: "bottom",
                                align: "start"
                            }
                        },
                        maintainAspectRatio: false,
                        onClick: barClick(aggs.Origens.buckets, "Origem")
                    }
                });
                console.log(aggs["Secções"])
                new Chart(document.getElementById("seccao"), {
                    type: "doughnut",
                    data: {
                        labels: Object.keys(aggs["Secções"].buckets),
                        datasets: [{
                            label: "Secções",
                            borderWidth: 0,
                            data: Object.values(aggs["Secções"].buckets).map(o => o.doc_count),
                            backgroundColor: Object.keys(aggs["Secções"].buckets).map(o => o.match(/com/i) ? origemColor("dgsi-indexer-STJ") : origemColor("csm-indexer"))
                        }]
                    },
                    options: {
                            plugins: {
                            legend: {
                                display: true,
                                position: "bottom",
                                align: "start"
                            }
                        },
                        maintainAspectRatio: false,
                        onClick: barClick(aggs.Origens.buckets, "Origem")
                    }
                });

                
            });

            function barAnoClick(buckets, inputName){
                return (event, elems) => {
                    if( elems.length <= 0 ) return;

                    let bucket = buckets[elems[0].datasetIndex];
                    let value = bucket.key;
                    let year = bucket.Anos.buckets[elems[0].index].key_as_string;

                    document.querySelectorAll(`input[name=${inputName}]`).forEach(input => input.remove());

                    let btn = document.querySelector("#onclickgraph")
                    btn.insertAdjacentHTML("afterend", `<input type="hidden" name="${inputName}" value="${value}">`);
                    document.querySelector("input[name=MinAno]").value = year;
                    document.querySelector("input[name=MaxAno]").value = year;
                    btn.dispatchEvent(event.native);                    

                }
            }

            function barClick(buckets, inputName){
                return (event, elems) => {
                    if( elems.length <= 0 ) return;

                    let bucket = buckets[elems[0].index];
                    let value = bucket.key;

                    document.querySelectorAll(`input[name=${inputName}]`).forEach(input => input.remove());

                    let btn = document.querySelector("#onclickgraph")
                    btn.insertAdjacentHTML("afterend", `<input type="hidden" name="${inputName}" value="${value}">`);
                    btn.dispatchEvent(event.native);
                }
            }

            function tribColor(trib){
                return getComputedStyle(document.querySelector(`[data-tribunal="${trib}"]`)).getPropertyValue("--tribunal-color") || "#000"
            }

            function origemColor(ori){
                if( ori == "csm-indexer" ) return tribColor("Supremo Tribunal Administrativo")
                if( ori.match("dgsi-indexer-.*") ) return tribColor("Supremo Tribunal de Justiça")
                if( ori == "tcon-indexer" ) return tribColor("Tribunal Constitucional")            
            }

            function strRange(min, max) {
                let r = []
                for (let i = min; i <= max; i++) {
                    r.push(`${i}`)
                }
                return r
            }
    //-script.
        function strRange(min, max) {
            let r = []
            for (let i = min; i <= max; i++) {
                r.push(`${i}`)
            }
            return r
        }
        let maxYear = !{parseInt(aggs.MaxAno.value_as_string)}
        let minYear = !{parseInt(aggs.MinAno.value_as_string)}
        let buckets = !{JSON.stringify(aggs.Anos.buckets.filter(o => tribunais.indexOf(o.key) > -1 ))}
        let labels = strRange(minYear,maxYear);
        function tribColor(trib){
            return getComputedStyle(document.querySelector(`[data-tribunal="${trib}"]`)).getPropertyValue("--tribunal-color") || "#000"
        }
        function chartClick(event, elems){
            if( elems.length <= 0 ){
                return
            };
            let bucket = buckets[elems[0].datasetIndex];
            let trib = bucket.key;
            let year = bucket.Anos.buckets[elems[0].index].key_as_string;
            // Option 1: Redirect to the page with the results
            //window.location.href = `/?q=!{q} Tribunal:"${trib}" Data:[01/01/${year} TO 31/12/${year}]`
            // Option 2: POST form for the results
            document.querySelectorAll("input[name=Tribunal]").forEach(o => o.checked = false)
            document.querySelector(`input[name=Tribunal][value="${trib}"]`).checked = true
            document.querySelector("input[name=MinAno]").value = year
            document.querySelector("input[name=MaxAno]").value = year
            document.querySelector("#onclickgraph").dispatchEvent(event.native)
        } 
        function chartClick1(event, elems){
            if( elems.length <= 0 ){
                return
            };
            let bucket = bucketsOri[elems[0].datasetIndex];
            let year = bucket.Anos.buckets[elems[0].index].key_as_string;
            document.querySelector(`input[name=Origem]`).value = bucket.key
            document.querySelector("input[name=MinAno]").value = year
            document.querySelector("input[name=MaxAno]").value = year
            document.querySelector("#onclickgraph").dispatchEvent(event.native)
        }

        function chartClick2(event, elems){
            if( elems.length <= 0 ){
                return
            };
            let bucket = bucketsOri[elems[0].datasetIndex];
            let year = bucket.Anos.buckets[elems[0].index].key_as_string;
            document.querySelector(`input[name=Origem]`).value = bucket.key
            
            document.querySelector("#onclickgraph").dispatchEvent(event.native)
        }

        new Chart(document.getElementById("graph"), {
            type: "bar",
            data: {
                labels: labels,
                datasets: buckets.map(trib => ({
                    label: trib.key,
                    borderWidth: 0,
                    data: trib.Anos.buckets.map(ano => ({x: (ano.key_as_string), y: ano.doc_count})).sort((a, b) => a.x - b.x),
                    backgroundColor: tribColor(trib.key)
                }))
            },
            options: {
                    plugins: {
                    legend: {
                        display: true,
                        position: "bottom",
                        align: "start"
                    }
                },
                scales: {
                    x: {
                        stacked: true
                    },
                    y: {
                        stacked: true
                    }
                },
                maintainAspectRatio: false,
                onClick: chartClick
            }
        });
        let bucketsOri = !{JSON.stringify(aggs.Origens.buckets)}

        let origemColor = (ori) => {
            if( ori == "csm-indexer" ) return tribColor("Supremo Tribunal Administrativo")
            if( ori.match("dgsi-indexer-.*") ) return tribColor("Supremo Tribunal de Justiça")
            if( ori == "tcon-indexer" ) return tribColor("Tribunal Constitucional")            
        }


        new Chart(document.getElementById("graph2"), {
            type: "bar",
            data: {
                labels: labels,
                datasets: bucketsOri.map((origem) => ({
                    label: origem.key,
                    borderWidth: 0,
                    data: origem.Anos.buckets.map(ano => ({x: (ano.key_as_string), y: ano.doc_count})).sort((a, b) => a.x - b.x),
                    backgroundColor: origemColor(origem.key)
                }))
            },
            options: {
                    plugins: {
                    legend: {
                        display: true,
                        position: "bottom",
                        align: "start"
                    }
                },
                scales: {
                    x: {
                        stacked: true
                    },
                    y: {
                        stacked: true
                    }
                },
                maintainAspectRatio: false,
                onClick: chartClick1
            }
        });

        new Chart(document.getElementById("graph3"), {
            type: "doughnut",
            data: {
                labels: bucketsOri.map(o => o.key),
                datasets: [{
                    label: "Origem",
                    borderWidth: 0,
                    data: bucketsOri.map(o => o.doc_count),
                    backgroundColor: bucketsOri.map(o => origemColor(o.key))
                }]
            },
            options: {
                    plugins: {
                    legend: {
                        display: true,
                        position: "bottom",
                        align: "start"
                    }
                },
                maintainAspectRatio: false,
                onClick: chartClick2
            }
        });
    style.
        .graph-column{
            position: relative;
            background-color: #f00;
            border-radius: 10px;
            transition: 0.2s;
        }