extends head 
block head
    title Jurisprudência - Índices
    script(src="https://cdn.plot.ly/plotly-2.12.1.min.js")

prepend header
    -currentPage = "list"
    .modal.fade#modal-histogram(tabindex="-1",role="dialog",aria-labelledby="modal-histogram-label",aria-hidden="true")
        .modal-dialog
            .modal-content
                .modal-header
                    div
                        h3#modal-histogram-label Histograma
                        small <span id="modal-histogram-key">Termo</span> com o valor "<span id="modal-histogram-val">Valor</span>"
                .modal-body
                    #histogram.w-100
                        | Clicar no histograma de um valor para o ver
                .modal-footer
                    button.btn.btn-secondary(type="button",data-bs-dismiss="modal") Fechar


block printpageinfo
    p Lista de !{term} da pesquisa por: "!{q || ""}"

prepend form
    input(type="text",name="term",hidden,value=term)#form-select-input

block main
    if aggs[term].sum_other_doc_count > 0
        .alert.alert-warning(role="alert")
            h5.alert-heading
                strong 
                    i.bi.bi-exclamation-circle
                    | Atenção:
                ul
                    li Existem !{aggs[term].sum_other_doc_count} outros valores não listados.
    if !userConfirm && aggs[term].buckets.length > 10000
        .alert.alert-danger(role="alert")
            h5.alert-heading
                strong 
                    i.bi.bi-exclamation-circle
                    | Atenção:
                ul
                    li Esta página irá descarregar uma tabela com !{aggs[term].buckets.length} linhas. <a href="./indices?!{querystring}&userConfirm=true">Continuar</a>
    .alert.alert-info(role="alert")
        h6.alert-heading
            strong 
                i.bi.bi-info-circle
                | &nbsp;Notas sobre o índice "!{term}":
            p.m-0#term-info A Carregar informação...
            script.
                fetch("./term-info?term=!{encodeURIComponent(term)}").then( r => r.status == 200 ? r.text() : "Sem informação..." ).catch( e => "Sem informação...").then( txt => document.getElementById("term-info").textContent = txt)
    table.table.table-sm
        thead 
            tr
                th #
                th Índice
                    a.ms-1(href=`./indices.csv?${querystring}` download): i.bi.bi-filetype-csv
                th(class="text-end border-end") Secções:
                th(class="text-end border-end" title="1.ª Secção (Cível)") 1.ª
                th(class="text-end border-end" title="2.ª Secção (Cível)") 2.ª
                th(class="text-end border-end" title="3.ª Secção (Criminal)") 3.ª
                th(class="text-end border-end" title="4.ª Secção (Social)") 4.ª
                th(class="text-end border-end" title="5.ª Secção (Criminal)") 5.ª
                th(class="text-end border-end" title="6.ª Secção (Cível)") 6.ª
                th(class="text-end border-end" title="7.ª Secção (Cível)") 7.ª
                th(class="text-end border-end" title="Secção Contencioso") Cont.
                td
                th(class="text-start") Datas
            tr 
                td !{aggs[term].buckets.length}
                td
                    select#form-select(name="term")
                        mixin option(value)
                            option(value=value selected=value==term) !{value}
                        +option("Área")
                        +option("Meio Processual")
                        +option("Decisão - Decomposta")
                        +option("Decisão - Integral")
                        +option("Secção")
                        +option("Relator")
                        +option("Votação - Decisão")
                        +option("Votação - Vencidos")
                        +option("Votação - Declarações")
                        +option("Descritores")
                        +option("Tribunal de Recurso - Tribunal")
                        +option("Tribunal de Recurso - Processo")
                        +option("Número de Processo")
                        +option("ECLI")
                -let obj = {}
                -aggs[term].buckets.forEach(b => b.Secções.buckets.forEach(s => obj[s.key] = (obj[s.key] || 0) + s.doc_count))
                th(class="text-end border-end") !{Object.values(obj).reduce((acc,s) => acc+s,0)}
                td(class="text-end border-end" title="1.ª Secção (Cível)") !{obj["1.ª Secção (Cível)"]}
                td(class="text-end border-end" title="2.ª Secção (Cível)") !{obj["2.ª Secção (Cível)"]}
                td(class="text-end border-end" title="3.ª Secção (Criminal)") !{obj["3.ª Secção (Criminal)"]}
                td(class="text-end border-end" title="4.ª Secção (Social)") !{obj["4.ª Secção (Social)"]}
                td(class="text-end border-end" title="5.ª Secção (Criminal)") !{obj["5.ª Secção (Criminal)"]}
                td(class="text-end border-end" title="6.ª Secção (Cível)") !{obj["6.ª Secção (Cível)"]}
                td(class="text-end border-end" title="7.ª Secção (Cível)") !{obj["7.ª Secção (Cível)"]}
                td(class="text-end border-end" title="Secção Contencioso")  !{obj["Contencioso"]}
                td
                th(class="text-start") de ... até
        tbody 
            mixin getSecCount(bucks, key)
                - let buck = bucks.find( o => o.key == key )
                if buck 
                    | !{buck.doc_count}
            if !userConfirm && aggs[term].buckets.length > 10000
                
            else
                each agg, index in aggs[term].buckets
                    tr
                        td.text-muted !{index+1}
                        td: a(href=`./indices?${querystring}&${term}="${encodeURIComponent(agg.key)}"`) !{agg.key}
                        td(class="text-end border-end") !{agg.doc_count}
                        td(class="text-end border-end"): +getSecCount(agg.Secções.buckets, "1.ª Secção (Cível)")
                        td(class="text-end border-end"): +getSecCount(agg.Secções.buckets, "2.ª Secção (Cível)")
                        td(class="text-end border-end"): +getSecCount(agg.Secções.buckets, "3.ª Secção (Criminal)")
                        td(class="text-end border-end"): +getSecCount(agg.Secções.buckets, "4.ª Secção (Social)")
                        td(class="text-end border-end"): +getSecCount(agg.Secções.buckets, "5.ª Secção (Criminal)")
                        td(class="text-end border-end"): +getSecCount(agg.Secções.buckets, "6.ª Secção (Cível)")
                        td(class="text-end border-end"): +getSecCount(agg.Secções.buckets, "7.ª Secção (Cível)")
                        td(class="text-end border-end"): +getSecCount(agg.Secções.buckets, "Contencioso")
                        td
                        if agg.MinAno.value_as_string == agg.MaxAno.value_as_string
                            td(class="text-start text-nowrap") !{agg.MaxAno.value_as_string}
                        else
                            td(class="text-start text-nowrap"): a(href="#histogram", data-bs-toggle="modal", data-bs-target="#modal-histogram", data-key=term, data-value=agg.key data-query=`./histogram?${querystring}&histogram_value=${encodeURIComponent(agg.key)}`) !{agg.MinAno.value_as_string} ... !{agg.MaxAno.value_as_string}
            
    script.
        document.getElementById("form-select").addEventListener("change", (e) => {
            document.getElementById("form-select-input").value = e.target.value;
            document.getElementById("filter-form").submit();
        })

        document.getElementById("modal-histogram").addEventListener("show.bs.modal", (event) => {
            let elm = event.relatedTarget;
            document.getElementById("modal-histogram-key").innerHTML = elm.dataset.key;
            document.getElementById("modal-histogram-val").innerHTML = elm.dataset.value;
            document.getElementById("histogram").innerHTML = "A carregar dados...";
            setTimeout(histogram, 250, elm);
        })

        function histogram(elm){
            fetch(elm.dataset.query).then( r => r.json() ).then( aggs => {
                setTimeout(_ => {
                    document.getElementById("histogram").innerHTML = "";
                    Plotly.newPlot("histogram", [{
                        x: aggs.Term.Anos.buckets.map(b => b.key_as_string),
                        y: aggs.Term.Anos.buckets.map(b => b.doc_count),
                        type: "bar"
                }], {xaxis: {autotypenumbers: 'strict'}}, {responsive: true});
                }, 100)
            }).catch(e => {
                console.log(e)
            })
            
        }