extends head 
block head
    title Jurisprudência - Índices
    script(src="https://cdn.plot.ly/plotly-2.12.1.min.js")

prepend header
    -currentPage = "list"
    .modal.fade#modal-histogram(tabindex="-1",role="dialog",aria-labelledby="modal-histogram-label",aria-hidden="true")
        .modal-dialog
            .modal-content
                .modal-header
                    div
                        h3#modal-histogram-label Histograma
                        small <span id="modal-histogram-key">Termo</span> com o valor "<span id="modal-histogram-val">Valor</span>"
                .modal-body
                    #histogram.w-100
                        | Clicar no histograma de um valor para o ver
                .modal-footer
                    button.btn.btn-secondary(type="button",data-bs-dismiss="modal") Fechar


block printpageinfo
    p Lista de !{term} da pesquisa por: "!{q || ""}"

block main
    if aggs[term].sum_other_doc_count > 0
        .alert.alert-warning(role="alert")
            h5.alert-heading
                strong 
                    i.bi.bi-exclamation-circle
                    | Atenção:
                ul
                    li Existem !{aggs[term].sum_other_doc_count} outros valores não listados.
    if !userConfirm && aggs[term].buckets.length > 10000
        .alert.alert-danger(role="alert")
            h5.alert-heading
                strong 
                    i.bi.bi-exclamation-circle
                    | Atenção:
                ul
                    li Esta página irá descarregar uma tabela com !{aggs[term].buckets.length} linhas. <a href="./indices?!{querystring}&userConfirm=true">Continuar</a>
    .alert.alert-info(role="alert")
        h6.alert-heading
            p.m-0#term-info A Carregar informação...
            script.
                fetch("./term-info?term=!{encodeURIComponent(term)}").then( r => r.status == 200 ? r.text() : "Sem informação..." ).catch( e => "Sem informação...").then( txt => document.getElementById("term-info").innerHTML = txt)
    -const OTHERS = "[Outros]"
    -let othersCounts = 0;
    -let groupObj = {}
    -let sortedGroup = []
    if group
        -aggs[term].buckets.forEach(b => b.Group ? b.Group.buckets.forEach(s => groupObj[s.key] = (groupObj[s.key] || 0) + s.doc_count) : null)
        -aggs[term].buckets.forEach(b => othersCounts += b.Group.sum_other_doc_count)
        -sortedGroup = Object.entries(groupObj).sort((a, b) => a[0].localeCompare(b[0]));
        -sortedGroup.slice(10).forEach( a => {
        -    othersCounts += groupObj[a[0]]
        -})
        -sortedGroup.splice(10)
        if othersCounts > 0
            -sortedGroup.push([OTHERS, othersCounts])
    table.table.table-sm
        thead 
            tr
                th #
                th Índice
                    a.ms-1(href=`./indices.csv?${querystring}` download): i.bi.bi-filetype-csv
                th(class="text-end border-end")
                    select#form-group-select(name="group") 
                        mixin option(value)
                            option(value=value selected=value==group) !{value}
                        // for now just some fields
                        option(value="") (nada)
                        +option("Área")
                        +option("Secção")
                for [name,count] of sortedGroup
                    if name == OTHERS
                        td(class="text-end border-end") !{name}
                    else
                        td(class="text-end border-end"): a(href=`./indices?${querystring}&${group}="${encodeURIComponent(name)}"`) !{name}
                    
                td
                th(class="text-start") Datas
            tr 
                td !{aggs[term].buckets.length}
                td
                    select#form-term-select(name="term")
                        mixin option(value)
                            option(value=value selected=value==term) !{value}
                        +option("Área")
                        +option("Meio Processual")
                        +option("Decisão - Decomposta")
                        +option("Decisão - Integral")
                        +option("Secção")
                        +option("Relator")
                        +option("Votação - Decisão")
                        +option("Votação - Vencidos")
                        +option("Votação - Declarações")
                        +option("Descritores")
                        +option("Tribunal de Recurso - Tribunal")
                        +option("Tribunal de Recurso - Processo")
                        +option("Número de Processo")
                        +option("ECLI")
                
                th(class="text-end border-end") !{groupObj.length > 0 ? Object.values(groupObj).reduce((acc,s) => acc+s,0) : aggs[term].buckets.reduce((acc,b) => acc+b.doc_count,0)}
                for [name,count] of sortedGroup
                    td(class="text-end border-end") !{count}
                td
                th(class="text-start") de ... até
        tbody 
            -let getGroupCount = (bucks, key) => {
            -    let r = bucks.find( o => o.key == key );
            -    return r ? r.doc_count : 0
            -}
            mixin showPositive(num)
                if num > 0
                    | !{num}
            if !userConfirm && aggs[term].buckets.length > 10000
                // Await user confirm
            else
                each agg, index in aggs[term].buckets
                    tr
                        td.text-muted !{index+1}
                        td(class="text-nowrap",style="width: 0px"): a(href=`./indices?${querystring}&${term}="${encodeURIComponent(agg.key)}"`) !{agg.key}
                        td(class="text-end border-end text-nowrap w-25") !{agg.doc_count}
                        -let count = 0
                        each [name,_count] of sortedGroup
                            if name == OTHERS
                                td(class="text-end border-end text-nowrap"): +showPositive(agg.doc_count - count)
                            else
                                td(class="text-end border-end text-nowrap")
                                    -let c = getGroupCount(agg.Group.buckets, name)
                                    -count+=c;
                                    +showPositive(c)
                        td
                        if agg.MinAno.value_as_string == agg.MaxAno.value_as_string
                            td(class="text-start text-nowrap") !{agg.MaxAno.value_as_string}
                        else
                            td(class="text-start text-nowrap"): a(href="#histogram", data-bs-toggle="modal", data-bs-target="#modal-histogram", data-key=term, data-value=agg.key data-query=`./histogram?${querystring}&histogram_value=${encodeURIComponent(agg.key)}`) !{agg.MinAno.value_as_string} ... !{agg.MaxAno.value_as_string}
            
    script.
        document.getElementById("form-term-select").addEventListener("change", (e) => {
            document.getElementById("form-select-term-input").value = e.target.value;
            document.getElementById("filter-form").submit();
        })

        document.getElementById("form-group-select").addEventListener("change", (e) => {
            document.getElementById("form-select-group-input").value = e.target.value;
            document.getElementById("filter-form").submit();
        })

        document.getElementById("modal-histogram").addEventListener("show.bs.modal", (event) => {
            let elm = event.relatedTarget;
            document.getElementById("modal-histogram-key").innerHTML = elm.dataset.key;
            document.getElementById("modal-histogram-val").innerHTML = elm.dataset.value;
            document.getElementById("histogram").innerHTML = "A carregar dados...";
            setTimeout(histogram, 250, elm);
        })

        function histogram(elm){
            fetch(elm.dataset.query).then( r => r.json() ).then( aggs => {
                setTimeout(_ => {
                    document.getElementById("histogram").innerHTML = "";
                    Plotly.newPlot("histogram", [{
                        x: aggs.Term.Anos.buckets.map(b => b.key_as_string),
                        y: aggs.Term.Anos.buckets.map(b => b.doc_count),
                        type: "bar"
                }], {xaxis: {autotypenumbers: 'strict'}}, {responsive: true});
                }, 100)
            }).catch(e => {
                console.log(e)
            })
            
        }