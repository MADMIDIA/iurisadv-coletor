doctype html
html(lang="en")
    head
        meta(charset="UTF-8")
        meta(http-equiv="X-UA-Compatible", content="IE=edge")
        meta(name="viewport", content="width=device-width, initial-scale=1.0")
        title Sumarizador
        style.
            @import url('https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css');            
            @import url('https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css');

            body{
                display: grid;
                grid-template:
                    "controls controls" min-content
                    "content extract" 
                        / 1fr 99fr;
                width: 100%;
                height: 100vh;
                background-color: #252525;
                margin: 0;
                padding: 0;
            }
            body > div {
                margin: 5px;
                background-color: #ffffff;
            }
    body
        div(style="grid-area: controls; margin: 5px;")
            input#file.form-control.form-control-sm(type="file", name="file", hidden)
            #progress-parent.progress(hidden)
                #progress-bar.progress-bar.progress-bar-striped.progress-bar-animated
            .p-2
                span.fw-bold#title 
                u.cursor-pointer.fw-bold#fake-input Inserir documento aqui
                |  |
                u.cursor-pointer.fw-bold.p-1.m-1#toogle(onclick="tooglePars()",hidden)
                u.cursor-pointer.fw-bold.p-1.m-1(onclick="showTop(5)") 5
                u.cursor-pointer.fw-bold.p-1.m-1(onclick="showTop(10)") 10
                u.cursor-pointer.fw-bold.p-1.m-1(onclick="showTop(15)") 15
                u.cursor-pointer.fw-bold.p-1.m-1(onclick="showTop(20)") 20
        div(style="grid-area: content; overflow: auto; resize: horizontal; width: 50vw; scroll-behavior: smooth;")    
            table.table.table-sm.table-borderless
                tbody#out
                    tr(data-par="1"): td O documento será mostrado aqui
        div(style="grid-area: extract; overflow: auto;")
            table.table.table-sm.table-borderless(style="grid-area: extract;")
                tbody#sentences.show-tops-20
                    tr(data-par="1"): td As frases extraidas serão mostradas aqui
        
        style.
            .show-tops-5 tr.tops5:before, .show-tops-10 tr.tops5:before, .show-tops-15 tr.tops5:before, .show-tops-20 tr.tops5:before{
                background: #e6c300 !important;
            }
            .show-tops-10 tr.tops10:before, .show-tops-15 tr.tops10:before, .show-tops-20 tr.tops10:before{
                background: #ffdd1a !important;
            }
            .show-tops-15 tr.tops15:before, .show-tops-20 tr.tops15:before{
                background: #ffe866 !important;
            }
            .show-tops-20 tr.tops20:before{
                background: #fff7cc !important;
            }

            .cursor-pointer{
                cursor: pointer;
            }

            #sentences .no-text {
                display: none;
            }

            tr[data-par]:before, a[data-par]:before{
                content: attr(data-par);
                text-align: center;
                font: 12px monospace;
                margin: 0px 0px 0px 4px;
                display: table-cell;
            }
            a[data-par]:before{
                margin: 0;
            }

            tr[data-par].no-text:before {
                font-size: 8px;
                line-height: 8px;
            }

            tr[data-par].no-text{
                line-height: 0px;
            }

            tr[data-par].no-text td{
                display: none;
            }
        script.
            // Setup post events
            addEventListener("load", function(){
                document.getElementById("file").addEventListener("change", function(e){
                    postFile(e.target.files[0]);
                });
                document.body.addEventListener("dragover", function(e){
                    e.preventDefault();
                    e.stopPropagation();
                });
                document.body.addEventListener("drop", function(e){
                    e.preventDefault();
                    e.stopPropagation();
                    document.getElementById("file").files = e.dataTransfer.files;
                    document.getElementById("file").dispatchEvent(new Event("change"));
                });
                document.getElementById("fake-input").addEventListener("click", function(e){
                    document.getElementById("file").click();
                });
            });


            let processingPost = false;
            function postFile(file){
                if(processingPost) return;
                processingPost = true;
                let progressParent = document.getElementById("progress-parent");
                let progressBar = document.getElementById("progress-bar");
                progressParent.removeAttribute("hidden");
                progressBar.style.width = "10%";

                let title = document.getElementById("title");
                title.innerText = file.name;
                let fk = document.getElementById("fake-input");
                if(fk){
                    fk.remove();
                } 
                document.getElementById("toogle").removeAttribute("hidden");

                let formData = new FormData();
                formData.append("file", file);
                fetch("https://pe.inesc-id.pt/sumarizador/", {
                    method: "POST",
                    body: formData
                }).then(response => {
                    progressBar.style.width = "50%";
                    return response.text()
                }).then(html => {
                    progressBar.style.width = "75%";
                    showResponse(html);
                }).finally(() => {
                    processingPost = false;
                    progressParent.setAttribute("hidden", "");
                });
            }

            function flatChildren(parent){
                if( parent.innerText.split("\n").length > 1 ){
                    return Array.from(parent.children).flatMap(o => flatChildren(o));
                }
                else{
                    return parent;
                }
            }

            function addSentence(parReference){
                let parentSentences = document.getElementById("sentences");
                let parent = parentSentences.insertRow();
                let linkCell = parent.insertCell();
                parent.dataset.par = parReference.dataset.par;
                let textCell = parent.insertCell();
                linkCell.innerHTML = `
                    <a href="#${parReference.id}"><i class="bi bi-arrow-up-left-circle"></i></a>
                    <a href="#" onclick="copyToClipboard('${parReference.id}', this)" style="transition: 0.25s"><i class="bi bi-clipboard"></i></a>    
                `;
                textCell.innerHTML = parReference.cells[0].innerHTML;
                parent.className = parReference.className;
            }

            function copyToClipboard(id, elem){
                let text = document.getElementById(id);
                navigator.clipboard.writeText(text.innerText);
                elem.style.color = "lightgreen";
                setTimeout(() => {
                    elem.style.color = "";
                }, 1500);
            }

            function displayTopTr(N){
                document.getElementById("out").className = "show-tops-" + N;
                return (tr) => {
                    tr.classList.add("no-text");
                    if( N >= 5 && tr.classList.contains("tops5") ){
                        tr.classList.remove("no-text");
                    }
                    else if( N >= 10 && tr.classList.contains("tops10") ){
                        tr.classList.remove("no-text");
                    }
                    else if( N >= 15 && tr.classList.contains("tops15") ){
                        tr.classList.remove("no-text");
                    }
                    else if( N >= 20 && tr.classList.contains("tops20") ){
                        tr.classList.remove("no-text");
                    }
                }
            }
            let currentTop = 0;
            function showTop(N){
                let parentSentences = document.getElementById("sentences");
                let trs = Array.from(parentSentences.querySelectorAll("tr"));
                currentTop = N;
                trs.forEach(displayTopTr(currentTop));
                tooglePars();
                tooglePars();
            }

            let hidden = true;
            function tooglePars(){
                if( hidden ){
                    document.querySelectorAll("#out .no-text").forEach(tr => {
                        tr.classList.remove("no-text");
                    });
                    document.getElementById("toogle").innerText = "Esconder parágrafos";
                    hidden = false;
                }
                else{
                    document.querySelectorAll("#out > [data-par]").forEach(displayTopTr(currentTop));
                    document.getElementById("toogle").innerText = "Mostrar parágrafos";
                    hidden = true;
                }
            }
            let multipleTags = ["OL", "UL", "BLOCKQUOTE"];
            function showResponse(html){
                let outTable = document.getElementById("out");
                outTable.innerHTML = "";
                let template = document.createElement("template");
                template.innerHTML = html;
                let pars = Array.from(template.content.childNodes);
                let parentSentences = document.getElementById("sentences");
                parentSentences.innerHTML = "";
                
                let parI = 1;
                for( let par of pars ){
                    if( multipleTags.includes(par.tagName) ){
                        parI = makeParForMultiple(parI, par);
                    }
                    else{
                        makePar(parI++, par);
                    }

                }
                showTop(5);
                if( hidden ){
                    tooglePars();
                }
            }

            function makeParForMultiple(i, parent, elementPadding){
                let start = 1;
                while( parent.children.length > 0 ){
                    let child = parent.children[0];
                    let padding = parent.cloneNode(false);
                    padding.setAttribute("start", start);
                    padding.appendChild(child);
                    makePar(i++, padding);
                    start++;
                }
                return i;
            }
            
            function makePar(i, par){
                let outTable = document.getElementById("out");
                let parRow = outTable.insertRow();
                let textCell = parRow.insertCell();
                let clone = par.cloneNode(true);
                textCell.appendChild(clone);
                parRow.id = "par-"+(i);
                parRow.dataset.par = i;
                if(clone.querySelectorAll){ // If it is a text node it will not have querySelectorAll
                    let scores = Array.from(clone.querySelectorAll("span[data-score]"));
                    if(scores.length > 0){
                        let best = scores.reduce((best, score) => {
                            if( parseFloat(score.dataset.score) > parseFloat(best.dataset.score) ){
                                best = score;
                            }
                            return best;
                        });
                        parRow.className = best.className;
                        addSentence(parRow);
                    }
                    else{
                        parRow.className = "others";
                    }
                }
            }

            function* enumerate(arr){
                let i = 0; 
                while( i < arr.length ){
                    yield [i, arr[i++]];
                }
            }

            function levenshteinDistance(s0, s1){
                let d = [];
                for(let i = 0; i <= s0.length; i++){
                    d[i] = [];
                    d[i][0] = i;
                }
                for(let j = 0; j <= s1.length; j++){
                    d[0][j] = j;
                }
                for(let i = 1; i <= s0.length; i++){
                    for(let j = 1; j <= s1.length; j++){
                        d[i][j] = Math.min(d[i-1][j] + 1, d[i][j-1] + 1, d[i-1][j-1] + (s0[i-1] === s1[j-1] ? 0 : 1));
                    }
                }
                return d[s0.length][s1.length];
            }

            function logistic(x){
                return 0.75 / (1+Math.exp(-200*(x-0.99))) + 0.25;
            }
