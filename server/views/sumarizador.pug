doctype html
html(lang="en")
    head
        meta(charset="UTF-8")
        meta(http-equiv="X-UA-Compatible", content="IE=edge")
        meta(name="viewport", content="width=device-width, initial-scale=1.0")
        title Sumarizador
        link(rel="stylesheet",href="./style.css")
        link(rel="stylesheet" href="https://use.fontawesome.com/releases/v5.3.1/css/all.css" integrity="sha384-mzrmE5qonljUremFsqc01SB46JvROS7bZs3IO2EmfFsd15uHvIt+Y8vEf7N7fWAU" crossorigin="anonymous")
    body.bg-dark(style="width: 100%; height: 100vh;")
        input#file.form-control.form-control-sm(type="file", name="file", hidden)
        #progress-parent.progress(hidden)
            #progress-bar.progress-bar.progress-bar-striped.progress-bar-animated
        .row.m-auto
            .col-12.col-sm-5.py-4
                table.table.table-sm.bg-white.table-borderless
                    thead
                        tr
                            th Paragrafo
                            th#title
                                u.cursor-pointer#fake-input Inserir documento aqui
                    tbody#out
            .col-12.col-sm-7.py-4
                table.table.table-sm.bg-white(style="position: sticky; top: 0;")
                    thead 
                        tr
                            th Parágrafo
                            th Exertos importantes (
                                span.cursor-pointer.p-1.m-1(onclick="showTop(5)") 5
                                span.cursor-pointer.p-1.m-1(onclick="showTop(10)") 10
                                span.cursor-pointer.p-1.m-1(onclick="showTop(15)") 15
                                |)
                    tbody#sentences
                        tr
                            td 
                            td As frases serão mostradas aqui
        style.
            .best{
                background: gold !important;
            }
            .cursor-pointer{
                cursor: pointer;
            }
        script.
            // Setup post events
            addEventListener("load", function(){
                document.getElementById("file").addEventListener("change", function(e){
                    postFile(e.target.files[0]);
                });
                document.body.addEventListener("dragover", function(e){
                    e.preventDefault();
                    e.stopPropagation();
                });
                document.body.addEventListener("drop", function(e){
                    e.preventDefault();
                    e.stopPropagation();
                    document.getElementById("file").files = e.dataTransfer.files;
                    document.getElementById("file").dispatchEvent(new Event("change"));
                });
                document.getElementById("fake-input").addEventListener("click", function(e){
                    document.getElementById("file").click();
                });
            });


            let processingPost = false;
            function postFile(file){
                if(processingPost) return;
                processingPost = true;
                let progressParent = document.getElementById("progress-parent");
                let progressBar = document.getElementById("progress-bar");
                progressParent.removeAttribute("hidden");
                progressBar.style.width = "10%";

                let title = document.getElementById("title");
                title.innerText = file.name;
                let formData = new FormData();
                formData.append("file", file);
                fetch("https://pe.inesc-id.pt/sumarizador/", {
                    method: "POST",
                    body: formData
                }).then(response => {
                    progressBar.style.width = "50%";
                    return response.json()
                }).then(obj => {
                    progressBar.style.width = "75%";
                    showResponse(obj);
                }).finally(() => {
                    processingPost = false;
                    progressParent.setAttribute("hidden", "");
                });
            }

            function flatChildren(parent){
                if( parent.innerText.split("\n").length > 1 ){
                    return Array.from(parent.children).flatMap(o => flatChildren(o));
                }
                else{
                    return parent;
                }
            }

            function hash( string ){
                return string.toLowerCase().replace(/[^a-z]/g, "");
            }

            let top15scores = [];
            function addSentence(reference, sentence){
                let parentSentences = document.getElementById("sentences");
                let row = parentSentences.insertRow();
                let parCell = row.insertCell();
                let anchor = document.createElement("a");
                anchor.href = `#${reference.id}`;
                anchor.innerText = reference.dataset.par;
                parCell.appendChild(anchor);
                let textCell = row.insertCell();
                textCell.innerHTML = sentence.text;
                textCell.dataset.score = sentence.score;
                textCell.dataset.text = sentence.text;
                row.setAttribute("hidden","");

                top15scores.push(sentence.score);
            }

            function showTop(N){
                let top15 = top15scores.sort((a,b) => b-a).slice(0,N).map( s => s.toString() );
                document.querySelectorAll("td[data-score]").forEach(td => {
                    if( top15.indexOf(td.dataset.score) > -1 ){
                        td.parentNode.removeAttribute("hidden");
                        document.querySelector(td.parentNode.cells[0].children[0].getAttribute("href")).cells[0].classList.add("best");
                    }
                    else{
                        td.parentNode.setAttribute("hidden","");
                        document.querySelector(td.parentNode.cells[0].children[0].getAttribute("href")).cells[0].classList.remove("best");
                    }
                });
            }

            function showResponse({sentences: sentences, html}){ // sentences: {text:"", start_char:0, end_char:0, score:0}
                let outTable = document.getElementById("out");
                outTable.innerHTML = "";
                let template = document.createElement("template");
                template.innerHTML = html;
                let pars = Array.from(template.content.children);
                let parentSentences = document.getElementById("sentences");
                parentSentences.innerHTML = "";
                top15scores = [];

                let currentSentence = sentences.shift();
                let cumHash = "";
                let lastI = 0;
                let lastParent = null;
                
                for( let [i, par] of enumerate(pars) ){
                    let parRow = outTable.insertRow();
                    let parCell = parRow.insertCell();
                    parCell.innerText = i+1;
                    let textCell = parRow.insertCell();
                    let clone = par.cloneNode(true);
                    let currHash = hash(clone.innerText);
                    textCell.appendChild(clone);
                    parRow.id = "par-"+(i+1);
                    parRow.dataset.par = i+1;
                    while( currentSentence && cumHash.indexOf(hash(currentSentence.text).slice(5,-5)) > lastI ){
                        lastI = cumHash.indexOf(hash(currentSentence.text).slice(5,-5));
                        addSentence(lastParent, currentSentence);
                        currentSentence = sentences.shift();
                    }
                    while( currentSentence && currHash.indexOf(hash(currentSentence.text).slice(5,-5)) > -1 ){
                        lastI += currHash.indexOf(hash(currentSentence.text).slice(5,-5));
                        addSentence(parRow, currentSentence);
                        currentSentence = sentences.shift();
                    }
                    while( currentSentence && !hash(currentSentence.text) ){
                        currentSentence = sentences.shift();
                    }
                    lastParent = parRow;
                    cumHash += currHash;
                }

                showTop(5);

                /*let bestN = sentences.sort((a, b) => b.score - a.score).slice(0, 10).sort((a, b) => a.initial_char - b.initial_char);

                let children = Array.from(out.children).flatMap(o => flatChildren(o));
                document.getElementById("sentences").innerHTML = "";

                for( let [i, sent] of enumerate(bestN) ){
                    let bestChild = {best: null, score: Infinity};
                    for( let child of children ){
                        let dist = levenshteinDistance(child.innerText.replace(/\W/g,""), sent.text.replace(/\W/g,""));
                        if( dist < bestChild.score ){
                            bestChild.best = child;
                            bestChild.score = dist;
                        }
                    }
                    if( bestChild.best ){
                        let clone = document.createElement("div");
                        clone.className = "m-1";
                        clone.innerHTML = bestChild.best.innerHTML;
                        clone.dataset.sentence = sent.text;
                        bestChild.best.classList.add("best");
                        bestChild.best.dataset.score = sent.score;
                        bestChild.best.id = `best-${i}`;

                        let row = document.getElementById("sentences").insertRow();
                        let a = document.createElement("a");
                        a.innerText = bestChild.best.dataset.par+1;
                        a.href = "#" + bestChild.best.id;
                        row.insertCell().appendChild(a);
                        row.insertCell().appendChild(clone);
                        row.insertCell().innerText = sent.score;
                        
                    }
                }*/
            }

            function* enumerate(arr){
                let i = 0; 
                while( i < arr.length ){
                    yield [i, arr[i++]];
                }
            }

            function levenshteinDistance(s0, s1){
                let d = [];
                for(let i = 0; i <= s0.length; i++){
                    d[i] = [];
                    d[i][0] = i;
                }
                for(let j = 0; j <= s1.length; j++){
                    d[0][j] = j;
                }
                for(let i = 1; i <= s0.length; i++){
                    for(let j = 1; j <= s1.length; j++){
                        d[i][j] = Math.min(d[i-1][j] + 1, d[i][j-1] + 1, d[i-1][j-1] + (s0[i-1] === s1[j-1] ? 0 : 1));
                    }
                }
                return d[s0.length][s1.length];
            }

            function logistic(x){
                return 0.75 / (1+Math.exp(-200*(x-0.99))) + 0.25;
            }
