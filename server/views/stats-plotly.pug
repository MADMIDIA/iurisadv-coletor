extends head 
block head
    title Estatísticas
    script(src="https://cdn.plot.ly/plotly-2.12.1.min.js")

prepend header
    -currentPage = "stats"

block printpageinfo
    p Estatísticas da pesquisa por: "!{q || ""}"

append form
    .d-flex.my-2.justify-content-center.align-items-center
        button.btn.w-100(type="submit", formaction=`./?q=${q || ""}`): u Ver resultados da pesquisa
        button#onclickgraph(type="submit", formaction=`./stats?q=${q || ""}`, hidden): u Ver resultados da pesquisa

block main
    pre: code #{JSON.stringify(aggs["Secções"])}
    .row.p-2
        .col-12.col-md-6#tribs
        .col-12.col-md-6#origs
        .col-12#years
        .p-relative(style="height: 70vh; width: 100%")
            svg#orig-ano
    .row.p-2
        .col-12.col-md-6
            h4 Acórdãos por Origem
            .p-relative(style="height: 70vh; width: 100%")
                svg#orig-round
        .col-12.col-md-6
            h4 Secção dos Acórdãos 
            .p-relative(style="height: 70vh; width: 100%")
                svg#seccao
    .row.p-2 
        small 
            | <b>Nota:</b> no caso de filtrar por um ano em particular, o gráfico poderá incluir outros anos.
            | Isto significa que alguma das datas associadas com o acórdão pertencem a esse ano, o acórdão aparece no gráfico com a maior data associada.
        script.
            const name2code = {
                "Supremo Tribunal de Justiça": "STJ",
                "Tribunal da Relação de Coimbra": "TRC",
                "Tribunal da Relação de Évora": "TRE",
                "Tribunal da Relação de Guimarães": "TRG",
                "Tribunal da Relação de Lisboa": "TRL",
                "Tribunal da Relação do Porto": "TRP",
                "Tribunal da Propriedade Intelectual": "TPI",
                "Tribunal da Concorrência, Regulação e Supervisão": "TCR",
                "Supremo Tribunal Administrativo": "STA",
                "Tribunal Central Administrativo Sul": "TCA",
                "Tribunal Central Administrativo Norte": "TCN",
                "Tribunal de Conflitos": "CON",
                "Acórdãos do Tribunal Constitucional": "TCO",
                "Tribunal Constitucional": "TCO",
                "Tribunal dos Conflitos": "CON"
            }
            fetch("./allStats?!{querystring}").then(r => r.json()).then(aggs => {
                const maxYear = parseInt(aggs.MaxAno.value_as_string);
                const minYear = parseInt(aggs.MinAno.value_as_string);
                
                Plotly.newPlot("tribs", [{
                    x: aggs.Anos.buckets.map(b => name2code[b.key]),
                    y: aggs.Anos.buckets.map(b => b.doc_count),
                    type: "bar",
                    marker: {
                        color: aggs.Anos.buckets.map(b => tribColor(b.key))
                    }
                }], {
                    title: "Acórdãos por Tribunal",
                    xaxis: {
                        title: "Número de acórdãos",
                        
                    },
                    yaxis: {
                        title: "Tribunal",
                        
                    }
                }).then( elem => {
                    elem.on("plotly_click", function(data){
                        let tribCod = data.points[0].label;
                        document.querySelectorAll(`input[name="Tribunal"]`).forEach(i => i.checked = false);
                        let trib = Object.entries(name2code).find(e => e[1] == tribCod)[0];
                        document.querySelector("#onclickgraph").insertAdjacentHTML("beforebegin", `<input type="hidden" name="Tribunal" value="${trib}">`);
                        document.querySelector("#onclickgraph").click(data.event);
                    });
                })

                Plotly.newPlot("origs", [{
                    x: aggs.Origens.buckets.map(b => b.key.replace("-indexer","")),
                    y: aggs.Origens.buckets.map(b => b.doc_count),
                    type: "bar",
                    marker: {
                        color: aggs.Origens.buckets.map(b => origemColor(b.key))
                    }
                }], {
                    title: "Acórdãos por Origem",
                    xaxis: {
                        title: "Número de acórdãos",
                        
                    },
                    yaxis: {
                        title: "Origem",
                        
                    }
                }).then( elem => {
                    elem.on("plotly_click", function(data){
                        let Origem = data.points[0].label.replace("-", "-indexer-");
                        Origem = Origem.match('-indexer') ? Origem : Origem + "-indexer";
                        document.querySelectorAll(`input[name="Origem"]`).forEach(i => i.remove());
                        document.querySelector(`#onclickgraph`).insertAdjacentHTML("beforebegin", `<input type="hidden" name="Origem" value="${Origem}">`);
                        document.querySelector("#onclickgraph").click(data.event);
                    });
                });

                Plotly.newPlot("years", aggs.Anos.buckets.map(b => {
                    return {
                        text: b.key,
                        x: b.Anos.buckets.map(b => parseInt(b.key_as_string)),
                        y: b.Anos.buckets.map(b => b.doc_count),
                        type: "bar",
                        name: name2code[b.key],
                        text: [],
                        marker: {
                            color: tribColor(b.key)
                        }
                    }
                }), {
                    title: "Acórdãos por Ano",
                    xaxis: {
                        title: "Ano",
                        
                    },
                    yaxis: {
                        title: "Número de acórdãos",
                        
                    },
                    barmode: "stack"
                }).then( elem => {
                    elem.on("plotly_click", function(data){
                        let year = data.points[0].x;
                        document.querySelector(`input[name="MinAno"]`).value = year;
                        document.querySelector(`input[name="MaxAno"]`).value = year;
                        document.querySelector("#onclickgraph").click(data.event);
                    });
                })
                /*
                new Chart(document.querySelector('#trib-ano'), {
                    type: "bar",
                    data: {
                        labels: labelsYears,
                        datasets: aggs.Anos.buckets.map(trib => ({
                            label: trib.key,
                            borderWidth: 0,
                            data: trib.Anos.buckets.map(ano => ({x: (ano.key_as_string), y: ano.doc_count})).sort((a, b) => a.x - b.x),
                            backgroundColor: tribColor(trib.key)
                        }))
                    },
                    options: {
                            plugins: {
                            legend: {
                                display: true,
                                position: "bottom",
                                align: "start"
                            }
                        },
                        scales: {
                            x: {
                                stacked: true
                            },
                            y: {
                                stacked: true
                            }
                        },
                        maintainAspectRatio: false,
                        onClick: barClick(aggs.Anos.buckets, "Tribunal")
                    }
                })
                new Chart(document.querySelector('#orig-ano'), {
                    type: "bar",
                    data: {
                        labels: labelsYears,
                        datasets: aggs.Origens.buckets.map(trib => ({
                            label: trib.key,
                            borderWidth: 0,
                            data: trib.Anos.buckets.map(ano => ({x: (ano.key_as_string), y: ano.doc_count})).sort((a, b) => a.x - b.x),
                            backgroundColor: origemColor(trib.key)
                        }))
                    },
                    options: {
                            plugins: {
                            legend: {
                                display: true,
                                position: "bottom",
                                align: "start"
                            }
                        },
                        scales: {
                            x: {
                                stacked: true
                            },
                            y: {
                                stacked: true
                            }
                        },
                        maintainAspectRatio: false,
                        onClick: barAnoClick(aggs.Origens.buckets, "Origem")
                    }
                });
                new Chart(document.getElementById("orig-round"), {
                    type: "doughnut",
                    data: {
                        labels: aggs.Origens.buckets.map(o => o.key),
                        datasets: [{
                            label: "Origem",
                            borderWidth: 0,
                            data: aggs.Origens.buckets.map(o => o.doc_count),
                            backgroundColor: aggs.Origens.buckets.map(o => origemColor(o.key))
                        }]
                    },
                    options: {
                            plugins: {
                            legend: {
                                display: true,
                                position: "bottom",
                                align: "start"
                            }
                        },
                        maintainAspectRatio: false,
                        onClick: barClick(aggs.Origens.buckets, "Origem")
                    }
                });
                console.log(aggs["Secções"])
                new Chart(document.getElementById("seccao"), {
                    type: "doughnut",
                    data: {
                        labels: Object.keys(aggs["Secções"].buckets),
                        datasets: [{
                            label: "Secções",
                            borderWidth: 0,
                            data: Object.values(aggs["Secções"].buckets).map(o => o.doc_count),
                            backgroundColor: Object.keys(aggs["Secções"].buckets).map(o => o.match(/com/i) ? origemColor("dgsi-indexer-STJ") : origemColor("csm-indexer"))
                        }]
                    },
                    options: {
                            plugins: {
                            legend: {
                                display: true,
                                position: "bottom",
                                align: "start"
                            }
                        },
                        maintainAspectRatio: false,
                        onClick: (event, elems) => {
                            if( elems.length <= 0 ) return;
                            let val = Object.keys(aggs["Secções"].buckets)[elems[0].index];
                            if( val.match(/com/i) ){
                                document.querySelector("input[name=hasField]" ).value = "Secção";
                            }
                            else{
                                document.querySelector("input[name=notHasField]" ).value = "Secção";
                            }
                            document.querySelector("#onclickgraph").dispatchEvent(event.native);
                        }
                    }
                });
                */
                
            });

            function barAnoClick(buckets, inputName){
                return (event, elems) => {
                    if( elems.length <= 0 ) return;

                    let bucket = buckets[elems[0].datasetIndex];
                    let value = bucket.key;
                    let year = bucket.Anos.buckets[elems[0].index].key_as_string;

                    document.querySelectorAll(`input[name=${inputName}]`).forEach(input => input.remove());

                    let btn = document.querySelector("#onclickgraph")
                    btn.insertAdjacentHTML("afterend", `<input type="hidden" name="${inputName}" value="${value}">`);
                    document.querySelector("input[name=MinAno]").value = year;
                    document.querySelector("input[name=MaxAno]").value = year;
                    btn.dispatchEvent(event.native);                    

                }
            }

            function barClick(buckets, inputName){
                return (event, elems) => {
                    if( elems.length <= 0 ) return;

                    let bucket = buckets[elems[0].index];
                    let value = bucket.key;

                    document.querySelectorAll(`input[name=${inputName}]`).forEach(input => input.remove());

                    let btn = document.querySelector("#onclickgraph")
                    btn.insertAdjacentHTML("afterend", `<input type="hidden" name="${inputName}" value="${value}">`);
                    btn.dispatchEvent(event.native);
                }
            }

            function tribColor(trib){
                let div = document.createElement("div");
                div.dataset.tribunal=trib;
                document.body.appendChild(div);
                let color = getComputedStyle(div).getPropertyValue("--tribunal-color");
                document.body.removeChild(div);
                return color;
            }

            function origemColor(ori){
                if( ori == "csm-indexer" ) return tribColor("STA")
                if( ori.match("dgsi-indexer-.*") ) return tribColor(ori.match("dgsi-indexer-(.*)")[1])
                if( ori == "tcon-indexer" ) return tribColor("TCO")
            }

            function strRange(min, max) {
                let r = []
                for (let i = min; i <= max; i++) {
                    r.push(`${i}`)
                }
                return r
            }
    style.
        .graph-column{
            position: relative;
            background-color: #f00;
            border-radius: 10px;
            transition: 0.2s;
        }